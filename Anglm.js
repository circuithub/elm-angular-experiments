// Generated by CoffeeScript 1.9.1
(function() {
  var action, actionN, compileAngular, decodeArg, embedDirective, getElmInit, getLog, initElmActions, makeActions, maybePfx, mkAction, reactDirective, updateAngularModal,
    slice = [].slice;

  (angular.module("Anglm", [])).factory("Anglm", [
    function() {
      return {
        makeActions: function(spec, port) {
          if (port == null) {
            port = _.identity;
          }
          return makeActions(spec, port);
        },
        makeEmbedDirective: function($compile, elmModule, initModule) {
          return embedDirective($compile, elmModule, initModule);
        },
        makeReactDirective: function() {
          return reactDirective();
        }
      };
    }
  ]).directive("anglmReact", [
    function() {
      return reactDirective();
    }
  ]).directive("anglmEmbed", [
    "$compile", function($compile) {
      return embedDirective($compile);
    }
  ]).directive("anglmEmbedActionsInitModel", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: true,
        exposeInit: true,
        exposeModel: true
      });
    }
  ]).directive("anglmEmbedActionsModel", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: true,
        exposeInit: false,
        exposeModel: true
      });
    }
  ]).directive("anglmEmbedActionsInit", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: true,
        exposeInit: true,
        exposeModel: false
      });
    }
  ]).directive("anglmEmbedInitModel", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: false,
        exposeInit: true,
        exposeModel: true
      });
    }
  ]).directive("anglmEmbedModel", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: false,
        exposeInit: false,
        exposeModel: true
      });
    }
  ]).directive("anglmEmbedActions", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: true,
        exposeInit: false,
        exposeModel: false
      });
    }
  ]).directive("anglmEmbedInit", [
    "$compile", function($compile) {
      return embedDirective($compile, {
        exposeActions: false,
        exposeInit: true,
        exposeModel: false
      });
    }
  ]);

  getLog = (function() {
    var $log;
    $log = null;
    return function() {
      return $log != null ? $log : $log = (angular.injector(['ng'])).get('$log');
    };
  })();

  reactDirective = function() {
    var def;
    def = {
      restrict: "E",
      template: "<div> </div>",
      replace: true,
      link: function(scope, elem, attrs) {
        var firstValid, model, onChange;
        onChange = scope.$eval(attrs['elmOnChange']);
        if (onChange == null) {
          throw "Anglm - reactDirective elm-on-change not defined";
        }
        model = attrs['elmModel'];
        if (model == null) {
          throw "Anglm - reactDirective elm-model not defined";
        }
        firstValid = true;
        return scope.$watch(model, function(val) {
          if (val !== void 0) {
            if (!firstValid) {
              onChange(val);
            }
            return firstValid = false;
          }
        });
      }
    };
    return def;
  };

  embedDirective = function($compile, options) {
    var def;
    def = {
      scope: {},
      restrict: "E",
      replace: true,
      template: '<div> <div> </div> </div>',
      link: function(scope, elem, attrs) {
        var elmApp, elmModule, elmRoot, ref;
        elmModule = (ref = options != null ? options.elmModule : void 0) != null ? ref : Elm[scope.elmModule];
        elmRoot = elem.children().get(0);
        elmApp = Elm.embed(elmModule, elmRoot, getElmInit(scope, options));
        initElmActions(scope, elmApp);
        compileAngular($compile, scope, elem);
        return elmApp.ports.model.subscribe(function(elmModel) {
          updateAngularModal(scope, elmModel);
          return compileAngular($compile, scope, elem);
        });
      }
    };
    if ((options != null ? options.elmModule : void 0) == null) {
      def.scope.elmModule = "@";
    }
    if (options != null ? options.exposeInit : void 0) {
      def.scope.elmInit = "@";
    }
    if (options != null ? options.exposeActions : void 0) {
      def.scope.elmActions = "=";
    }
    if (options != null ? options.exposeModel : void 0) {
      def.scope.elmModel = "=";
    }
    return def;
  };

  getElmInit = function(scope, options) {
    var check;
    check = function(m) {
      if (!_.isPlainObject(m)) {
        throw "Anglm - the model used to initialize the ELM module must be a simple object";
      }
      return {
        initModule: m,
        actions: null
      };
    };
    if ((options != null ? options.elmInit : void 0) != null) {
      return check(options.elmInit);
    }
    if (_.isString(scope.elmInit)) {
      return check(JSON.parse(scope.elmInit));
    }
    if (_.isObject(scope.elmInit)) {
      return check(scope.elmInit);
    }
    return {
      actions: null
    };
  };

  initElmActions = function(scope, elmApp) {
    if (scope.elmActions == null) {
      scope.elmActions = {};
    }
    _.assign(scope.elmActions, makeActions(elmApp.ports.spec, elmApp.ports.actions.send));
    return scope;
  };

  updateAngularModal = function(scope, elmModel) {
    scope.$apply(function(scope) {
      if (scope.elmModel == null) {
        scope.elmModel = {};
      }
      return _.assign(scope.elmModel, elmModel);
    });
    return scope;
  };

  compileAngular = function($compile, scope, elem) {
    var e, i, j, ref, results, targets;
    targets = elem.find('anglm-compile');
    results = [];
    for (i = j = 0, ref = targets.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      e = targets.eq(i);
      if (!e.prop("anglm-compiled")) {
        e.prop("anglm-compiled", true);
        results.push(($compile(e))(scope));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  makeActions = function(s, ctx) {
    var j, len, r, ss;
    if (_.isArray(s)) {
      r = {};
      for (j = 0, len = s.length; j < len; j++) {
        ss = s[j];
        _.assign(r, mkAction(ss, ctx));
      }
      return r;
    } else {
      return mkAction(s, ctx);
    }
  };

  mkAction = function(s, ctx) {
    var a;
    a = _.compact([action(s, ctx), actionN(s, ctx)]);
    if (a.length !== 1) {
      throw "Anglm.makeActions - ambiguity found ";
    } else {
      return a[0];
    }
  };

  action = function(s, ctx) {
    var obj;
    if (!(_.isEmpty(_.omit(s, ["tag"]))) || (s.tag == null)) {
      return null;
    } else {
      return (
        obj = {},
        obj["" + s.tag] = function() {
          return ctx(s);
        },
        obj
      );
    }
  };

  actionN = function(s, ctx) {
    var obj;
    if (!(_.isEmpty(_.omit(s, ["tag", "args"]))) || !((s.tag != null) && (s.args != null))) {
      return null;
    } else {
      return (
        obj = {},
        obj["" + s.tag] = function() {
          var a, r;
          a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          r = {
            tag: s.tag,
            args: _.map(_.zip(s.args, a), decodeArg)
          };
          return ctx(r);
        },
        obj
      );
    }
  };

  maybePfx = "ArgumentTagMaybe ";

  decodeArg = function(arg) {
    var argSpec, argValue;
    argSpec = arg[0], argValue = arg[1];
    if (argSpec == null) {
      throw "Anglm.makeActions - argSpec is null";
      return null;
    }
    if (argSpec.slice(0, maybePfx.length) === maybePfx) {
      if (argValue != null) {
        return decodeArg([argSpec.slice(maybePfx.length), argValue]);
      } else {
        return null;
      }
    }
    if (argSpec === "ArgumentTagInt") {
      if (!_.isNumber(argValue || (Math.ceil(argValue !== argValue)))) {
        throw "Anglm.makeActions - expecting an integer";
      }
      return argValue;
    }
    if (argSpec === "ArgumentTagFloat") {
      if (!_.isNumber(argValue)) {
        throw "Anglm.makeActions - expecting a float";
      }
      return argValue;
    }
    if (argSpec === "ArgumentTagString") {
      if (!_.isString(argValue)) {
        throw "Anglm.makeActions - expecting a string";
      }
      return argValue;
    }
    if (argSpec === "ArgumentTagBool") {
      if (!_.isBoolean(argValue)) {
        throw "Anglm.makeActions - expecting a boolean";
      }
      return argValue;
    }
    throw "Anglm.makeActions - JS and ELM diverged. Don't know how to handle " + argSpec + " as an argument";
  };

}).call(this);
